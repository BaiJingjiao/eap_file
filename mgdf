直接接触一个较高质量的自动化测试框架
一个开放的工作平台
领导对自动化测试的认知度较高，开展的决心大，支持力度大
手工测试团队，与自动化测试团队，分工清楚，合作度高
                                              

问题：
自动化测试团队内部，没有一个人真正意义上整体照看用例层下面的工作，导致底层业务封装重复度较高，新加入的人，会困扰，增加新人使用难度，降低可维护性


突破
在原主管带领下，全程参与新框架的设计和实现；
在原有框架思路基础上，引入BasePage的思路，进而衍生出ByUtil的思路，显著的提高了PageObject层的代码简洁度，完成同样的用例产出，代码量显著减少（2/3？）



Matrixcare & Blackline

Matrixcare
原有自动化框架设计为关键字驱动，用excel表管理测试用例，已开展1年左右，团队4人，用例量1000+，
用例全部运行一遍，需用时接近40个小时，且运行结果出错率与日俱增，用例单独运行通过，批量运行为何出错原因不明 … …

我为团队做了什么

分析原因：
填表模式写用例，本身局限性较大，不够灵活；调试用例效率也较低，此为这种设计模式的缺陷；
团队组织用例的方式上，未处理好用例间的依赖关系，导致用例耦合度较高，难以分组并发运行，只能顺序执行；
框架中没有针对页面元素智能等待机制，用例采用硬性等待，为保证稳定，等待时间偏长，也造成总耗时过长。
批量运行的fail率高，猜测为用例的前提条件未处理好，考虑不周到，比如数据干扰之类。


按领导要求，废弃原有框架，重新按Everbridge自动化框架思路搭建框架，用例表现形式为代码，放弃填表模式。

带领团队6人，耗时3个月，将原有1000+用例在新框架中重构。离开北京后约半年左右，电话支持团队解决chromedriver运行一段时间后占用内存越来越大导致崩溃的问题（其实是想办法绕过了此问题，保证批量运行成功结束）


Blackline
原团队为手工测试团队，团队希望将自动化工作也接过来，需要想客户证明团队有开展自动化工作的能力，但在过去两年中，团队先后尝试过三次，均未能做起来。

看到Matrixcare新框架开展顺利，于是希望我帮助团队，做第四次尝试，用时3个星期，完成。最终团队拿下了Blankline的自动化测试业务(在我离开北京的两个月后)。

突破：
完全独立完成两个项目的自动化框架搭建；
进一步完善框架层细节处理，特别是在原ByUtil基础上，演化成BaseUtil，直接由BaseUtil解决页面元素等待就绪，代码简洁性，以及页面元素基本操作封装，使得PageObject层和用例层完全不需要考虑技术细节，只需要聚焦业务逻辑本身。
完善自动化报告。


华为服务器端接口自动化测试

问题：越做越累，不知道为什么。

问题分析

工作方式的原因，本身存在不方便之处，步骤繁琐，耗时。
环境信息组织不合理，导致当需要切换对接被测环境时，麻烦，易出错。
自动化用例，未使用断言。
自动化用例，日志输出未考虑场景不满足预期时，排查问题的需要，而是本着正常通过的情况，只为了好看，导致分析失败用例，日志作用不大，需要重新去用例里面加日志帮助分析，非常低效。
用例里面都是硬性等待响应消息，浪费时间，且导致用例不稳定。

封装意识不足


优化点
MergeAllInOne: 模型—-转换工具目录—-转换—-在调试目录创建文件夹—-copy至调试目录—-调试
SwitchEnv：解决被测环境切换问题，环境信息组织不合理，导致切换环境需要修改5个文件的8处信息。
assertBaseAutoWait()：为团队引入断言机制，针对服务器消息结构特点，自定义断言。同时解决，响应消息的智能等待，以及当用例实际结果不满足预期时log输出不直观问题，提高排查问题效率。
封装基础方法


在SwitchEvn机制的基础上优化流水线，使得多条流水线的执行机可以复用，使得流水线具备快速出结果能力（从10个小时，降低到4个小时）

Tmssutil， 解决批量用例不需要模型也可以方便的上工厂。从而让团队摆脱模型制约，且减少上工厂出错率

突破
EUA mocker
uportal mocker
HWPush mocker
APNS mocker



所谓框架，一套工具集+一套做事的规则

框架不同，对自动化测试的工作的效率以及质量的影响，很大
如：Matrixcare 旧框架上一年的工作产出，在新框架下3个月完成(有人员增加的因素，有业务熟悉的因素，有框架因素)


自动化用例，不能赶，急急忙忙的堆砌出来的东西，后患无穷
自动化测试工作，内容琐碎，要注意细节，时不时需要回头整理优化，该重构的要及时重构，否则经年累月后，问题爆发，很难回头，严重的做不下去了，好点的可以继续，但越走越累，隐形成本极高

代码能力是需要的，但不要迷信代码能力，不是代码能力越强，自动化工作就能做得越好，很多自动化测试的问题，都不是代码能力导致的，也不是代码能力能解决的
重要的还是做事的思路，方式方法选择等等，代码能力可以支撑你实现你的思路，就足够了

这套框架，是在项目实践中一点一点磨出来的，多方借鉴，将好的做法整合进来，然后在实际项目中实践，根据具体问题调整优化，经历多个项目，演化至此












    
                                           
